class Solution {

// dynamic programming
    public int minCostClimbingStairs(int[] cost) {
        if (cost.length == 0) return 0;
        if (cost.length == 1) return cost[0];
        if (cost.length == 2) return Math.min(cost[0], cost[1]);
        
        int step1 = 0;
        int step2 = 0;

        for (int i = 2; i < cost.length; i++) {
            cost[i]= cost[i] +Math.min(cost[i-1], cost[i-2]);
            step1= step2;
            step2 = cost[i];            
        }
        return Math.min(cost[cost.length -1], cost[cost.length-2]); 
    }
}

// in place 
class Solution {
    public int minCostClimbingStairs(int[] cost) {

        for (int i = 2; i < cost.length; i++){
            cost[i] = cost[i] + Math.min (cost[i-1], cost[i-2]);
        }
        return Math.min (cost[cost.length-1], cost[cost.length-2]);
    }
}
// out of place 
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int[] helper = new int[cost.length];
        helper[0]= cost[0];
        helper[1]= cost[1];
        for (int i = 2; i < cost.length; i++){
            helper[i] = cost[i] + Math.min (helper[i-1], helper[i-2]);
        }
        return Math.min(helper[helper.length-1], helper[helper.length-2]);
    }
}


