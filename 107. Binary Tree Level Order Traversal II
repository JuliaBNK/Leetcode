// Java

/** 
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        
        Stack <List<Integer>> temp = new Stack<>();
        
        Queue <TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        while (!queue.isEmpty())  {
            List <Integer> level = new ArrayList<>();
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode current = queue.remove();
                level.add(current.val);
                //   System.out.println (level);
                 if (current.left != null){
                queue.add(current.left); 
                }
                 if (current.right != null) {
                queue.add(current.right);
                }
               
            }
            temp.add(level);
                  
        }
        
        while (!temp.isEmpty()) {
            result.add(temp.pop());
        }
       return result; 
    
    }
}

#Python 

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        result = []
        if root == None:
            return result
    
        queue = []
        queue.append(root)
        
        while queue:
            levelList = []
            for _ in range(len(queue)):
                node = queue.pop(0)
                
                levelList.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            
            result.append(levelList)
        
            
        return reversed(result)    
