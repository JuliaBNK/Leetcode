/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    

    
    public boolean isSameTree(TreeNode p, TreeNode q) {
        ArrayList <String> l1 = new ArrayList<String>(); 
        ArrayList <String> l2 = new ArrayList<String>();
        preOrderTraversal(p, l1);
        preOrderTraversal(q, l2);
        //for (int i =0; i <l1.size(); i++) {
        //System.out.println("l1 : " + l1.get(i));
        //}
                           
       // for (int i =0; i <l2.size(); i++) {
        //System.out.println("l2 : " + l2.get(i));
        //}
        
        for (int i=0; i < l1.size(); i++) {
           // System.out.println ("l1.get(i) = " + l1.get(i) + " l2.get(i)" + l2.get(i));
           if (!l1.get(i).equals(l2.get(i))) {
                return false;
                }
        }
        
       return true; 
    }
    
    // pre-order traversal
    private void preOrderTraversal(TreeNode node, ArrayList<String> list) { 
        if (node != null) {
            list.add(String.valueOf(node.val));
            preOrderTraversal(node.left,list);
            preOrderTraversal(node.right,list);
       }
        else{
            list.add("null");   
        }
    }
    
}   
